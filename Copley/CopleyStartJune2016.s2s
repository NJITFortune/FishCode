Var port%:=8; ' Change to Match Port Number from CME2
var baud%:=115200;
var bits%:=8;
var par%:=0;
var stop%:=1;
Var hsk%:=0;
Var List%:=1;

'Var ascale$:="s r0x19 220000\n";     ' Analog scaling, counts per 10V
Var ascale$:="s r0x19 6500000\n";     ' Analog scaling, counts per 10V
' Velocity mode, 1 Hz, 2V pk-pk -> 5cm

' 5,000,000 is 1V/0.5Hz -> 4cm, 1V/1Hz -> 2cm
'ascale, 'mvel, macc, mdec is 500,000 1V/0.5Hz -> .5cm

Var mvel$:="s r0xcb 100000\n";        ' Max velocity, counts per second
Var macc$:="s r0xcc 100000\n";        ' Max acceleration, counts per second
Var mdec$:="s r0xcd 100000\n";        ' Max deceleration, counts per second
Var scal$:="s r0x19 4000\n"; ' Scaling in counts per 10V
Var dbnd$:="s r0x26 10\n" 'this is the deadband in mV
Var offset$:="s r0x1a 0\n"; ' Set offset (don't understand this command
Var homey$:="s r0xc2 512\n"; ' set current location as home

Var homeread$:="g r0x32\n"; 'read current location at home

Var apos$:="s r0x24 22\n";          ' 22 is Analog Position mode
Var avel$:="s r0x24 12\n";          ' 12 is Analog Velocity mode
Var stp$:="s r0x24 0\n";            ' stops the device

Var pstart$:="t 1\n";               ' Start program
Var pendd$:="t 0\n";                ' Stop program
Var eerr$;
Var err%;
Var ok%;
Var Out$;
Var in$;
Var curPos$;

Var term$:="\r\n";

'' Open the Serial Port (need to have already made contact via CME2 prior to running this script.
err%:=SerialOpen(port%, baud%, bits%, par%, stop%, hsk%);

'' Setup 
err%:=SerialWrite(port%, mvel$);
    'err%:=SerialRead(port%, in$);
    'Message(Print$("Vel is %s ", in$));
Yield(1);
err%:=SerialWrite(port%, macc$);
    'err%:=SerialRead(port%, in$);
    'Message(Print$("Acc is %s ", in$));
Yield(1);
err%:=SerialWrite(port%, mdec$);
    'err%:=SerialRead(port%, in$);
    'Message(Print$("Decel is %s ", in$));
Yield(1);
err%:=SerialWrite(port%, scal$);
    err%:=SerialRead(port%, in$);
    Message(Print$("Scal is %s ", in$));

Yield(1);
err%:=SerialWrite(port%, dbnd$);
    'err%:=SerialRead(port%, in$);
    'Message(Print$("DeadBand is %s ", in$));
Yield(1);
err%:=SerialWrite(port%, offset$);
    'err%:=SerialRead(port%, in$);
    'Message(Print$("Offset is %s ", in$));
Yield(1);
    Var posMode$:= "s r0x24 21\n"; ' position mode
    err%:=SerialWrite(port%, posMode$);
    'Message(Print$("Position Mode is %s ", in$));
Yield(1);
err%:=SerialWrite(port%, homeread$);
    err%:=SerialRead(port%, curPos$);
    Message(Print$("Home Position is ", curPos$));

'' Sets the scaling of the voltage to velocity.
err%:=SerialWrite(port%, ascale$);
    'err%:=SerialRead(port%, in$);
    'Message(Print$("Scale is %s ", in$));
Yield(1);

' Activates analogue velocity or position mode
'
   err%:=SerialWrite(port%, apos$); ' POSITION MODE 
   err%:=SerialRead(port%, in$);
   Message(Print$("Position = %s ", in$));

'err%:=SerialWrite(port%, avel$); ' VELOCITY MODE 
'    err%:=SerialRead(port%, in$);
'    Message(Print$("Velocity = %s ", in$));

'' Closes the serial port.
SerialClose(port%);

